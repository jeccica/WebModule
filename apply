#!/usr/bin/env node

var fs = require("fs");
var path = require("path");

var baseDir = path.resolve(__dirname, "..");
var dirs    = fs.readdirSync(baseDir);
var dirList = filterDirectoryList(dirs, ".travis.yml");

// console.log(dirList);

// --- overwrite .travis.yml ---
if (1) {
    overwriteFile(dirList, "./.travis.yml", ".travis.yml");
}
// --- overwrite .jshintrc ---
if (0) {
    overwriteFile(dirList, "./.jshintrc", ".jshintrc");
}


function overwriteFile(dirs,             // @arg DirectoryNameArray: ["Proxy.js", "NodeProxy.js", ...]
                       sourceFile,       // @arg PathString:
                       targetFileName) { // @arg String: "file.ext"
    var sourceText = fs.readFileSync(sourceFile, "UTF-8");

    dirs.forEach(function(repositoryName) {

        if (isDir(baseDir + "/" + repositoryName)) {
            if (isFile(baseDir + "/" + repositoryName + "/" + targetFileName)) {
                console.log("overwirte: " + baseDir + "/" + repositoryName + "/" + targetFileName);
                fs.writeFileSync(baseDir + "/" + repositoryName + "/" + targetFileName,
                                 sourceText);
            }
        }
    });
}

function filterDirectoryList(dirs, findFileName) {
    return dirs.reduce(function(result, dir) {
                console.log("DIR = " + baseDir + "/" + dir);

                if (dir === "WebModule") {
                    ;
                } else {
                    if (isDir(baseDir + "/" + dir)) {
                        if (isFile(baseDir + "/" + dir + "/" + findFileName)) {
                            result.push(dir);
                        }
                    }
                }
                return result;
            }, []);
}

function isDir(path) {
    if (!fs.existsSync(path)) {
        return false;
    }
    var stat = fs.statSync(path);

    return stat && stat.isDirectory();
}

function isFile(path) {
    if (!fs.existsSync(path)) {
        return false;
    }
    var stat = fs.statSync(path);

    return stat && stat.isFile();
}

